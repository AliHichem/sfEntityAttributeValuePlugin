<?php

/**
 * PluginEav
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class PluginEav extends BaseEav
{

    /**
     * Enregistre les information complémentaires de la ressource
     * spécifié dans la BD. En édition, la mise à jour ne supporte que les
     * libellé des eav, les choix/options des eav multiples (checkbox,radio
     * select) seront bloquée dans le rendu HTML
     *
     * @param sfEvent $event évènements
     *
     * @todo: modifier l'enregistrement de façon à supporter la modification
     * des options des eav multiples.
     *
     * @return  void
     */
    public static function saveIntoDb(sfEvent $event)
    {
        $context = sfContext::hasInstance() ? sfContext::getInstance() : NULL;
        if ($context)
        {
            $user = $context->getUser();
            try
            {
                $ressource_id = (int) $event['params']['ressource_id'];
                $entity_id = (int) $event['params']['entity_id'];
                self::createEavGroupIfNotExists($ressource_id, $entity_id);
                $q = Doctrine_Query::create()
                        ->from('EavGroups eg')
                        ->where(sprintf("eg.ressource_id = '%s' and  eg.entity_id ='%s' ", $ressource_id, $entity_id));
                if ($q->count() == 1)
                {
                    $eavGroup = $q->fetchOne();
                    $json = unserialize($eavGroup->getJson());
                    $formData = array('form_structure' => $eavGroup->getJson(), 'form_hash' => sha1($eavGroup->getJson()));
                    $form = new Formbuilder($formData);
                    $items = $form->retrieve();
                    $itemIds = array();
                    $eavFullValueIds = array();
                    foreach ($items as $code => $item)
                    {
                        if (isset($item['id']))
                        {
                            $itemIds[] = $item['id'];
                            $eavType = new sfEavType($item['class']);
                            $eav = Doctrine_Core::getTable('Eav')->findOneById($item['id']);
                            if ($eav)
                            {
                                if ($eav->getLabel() != $item[$eavType->getTitleField()])
                                {
                                    $eav->setLabel($item[$eavType->getTitleField()]);
                                    $eav->save();
                                }
                                if (!is_array($item['values']))
                                {
                                    $eavFullValueIds[] = $eav->getEavFullValues()->getFirst()->getId();
                                    $item['values'] = array(array("value" => '',
                                            "default" => 'false'));
                                }
                                foreach ($item['values'] as $value)
                                {
                                    $default = $value['default'] == "false" ? FALSE : TRUE;
                                    if (isset($value['id']))
                                    {
                                        $eavFullValueIds[] = $value['id'];
                                        $eavFullValue = Doctrine_Query::create()
                                                ->from('EavFullValues')
                                                ->where(sprintf(" id = '%s' ", (int) $value['id']))
                                                ->fetchOne();
                                        if (is_object($eavFullValue))
                                        {
                                            if ($eavFullValue->getValue() != $value['value'] || $eavFullValue->getIsSelected() != $default)
                                            {
                                                $eavFullValue->setValue($value['value']);
                                                $eavFullValue->setIsSelected($default);
                                                $eavFullValue->save();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        $eavFullValue = new EavFullValues();
                                        $eavFullValue->setEavId($eav->getId());
                                        $eavFullValue->setValue($value['value']);
                                        $eavFullValue->setIsSelected($default);
                                        $eavFullValue->save();
                                        $eavFullValueIds[] = $eavFullValue->getId();
                                    }
                                }
                            }
                        }
                        else
                        {
                            $eavType = new sfEavType($item['class']);
                            $eav = new Eav();
                            $eav->setEavGroupId($eavGroup->getId());
                            $eav->setEavTypeId($eavType->getId());
                            $eav->setLabel($item[$eavType->getTitleField()]);
                            $eav->setCode($code);
                            $eav->save();
                            $itemIds[] = $eav->getId();
                            $values = $item['values'];
                            if (!is_array($values))
                            {
                                $values = array(array("value" => '',
                                        "default" => 'false'));
                            }
                            foreach ($values as $value)
                            {
                                $eavFullValue = new EavFullValues();
                                $eavFullValue->setEavId($eav->getId());
                                $eavFullValue->setValue($value['value']);
                                $eavFullValue->setIsSelected($value['default'] == "false" ? false : true);
                                $eavFullValue->save();
                                $eavFullValueIds[] = $eavFullValue->getId();
                            }
                        }
                    }
                    if (!empty($itemIds))
                    {
                        $queryDelete = Doctrine_Query::create()
                                ->delete('Eav e')
                                ->where(sprintf("e.id not in (%s)", implode(',', $itemIds)))
                                ->andWhere(sprintf("e.eav_group_id = '%s'", $eavGroup->getId()))
                                ->execute();
                    }
                    else
                    {
                        $queryDelete = Doctrine_Query::create()
                                ->delete('Eav e')
                                ->where(sprintf("e.eav_group_id = '%s'", $eavGroup->getId()))
                                ->andWhere(sprintf("e.eav_group_id = '%s'", $eavGroup->getId()))
                                ->execute();
                    }
                    $eavIds = array();
                    $eavs = Doctrine_Query::create()
                            ->select("e.id")
                            ->from("Eav e")
                            ->where(sprintf("e.eav_group_id = '%s'", $eavGroup->getId()))
                            ->fetchArray();
                    foreach ($eavs as $id)
                    {
                        $eavIds[] = $id['id'];
                    }
                    if (!empty($eavFullValueIds))
                    {
                        $queryDelete = Doctrine_Query::create()
                                ->delete('EavFullValues')
                                ->where(sprintf("id not in (%s)", implode(',', $eavFullValueIds)))
                                ->andWhere(sprintf("eav_id in (%s)", implode(',', $eavIds)))
                                ->execute();
                    }
                }
            }
            catch (exception $e)
            {
                throw $e;
            }
        }
    }

    public static function createEavGroupIfNotExists($ressource_id, $entity_id)
    {
        $context = sfContext::hasInstance() ? sfContext::getInstance() : NULL;
        if ($context)
        {
            $json = substr($context->getRequest()->getParameter('eav_dynamics_json'), 1);
            parse_str($json);
            $form = new Formbuilder($ul);
            $q = Doctrine_Query::create()->from('EavGroups eg')
                    ->where(sprintf("eg.ressource_id = '%s' and eg.entity_id ='%s'", $ressource_id, $entity_id));
            if ($q->count() == 0)
            {
                $eavGroup = new EavGroups();
                $eavGroup->setRessourceId($ressource_id);
                $eavGroup->setEntityId($entity_id);
            }
            else
            {
                $eavGroup = $q->fetchOne();
            }
            $formStructure = $form->store();
            $eavGroup->setJson($formStructure['form_structure']);
            $eavGroup->save();
        }
    }

    /**
     * enregistre les valeurs du groupe d'information complémentaires
     *
     * @param sfEvent $event object evènement
     *
     * @return void
     */
    public static function saveValuesIntoDb(sfEvent $event)
    {
        $context = sfContext::hasInstance() ? sfContext::getInstance() : NULL;
        if ($context)
        {
            $user = $context->getUser();
            $request = $context->getRequest();
            try
            {
                $eavForms = $request->getPostParameter(eavDynamicForm::FORM_NAME, NULL);
                foreach ($event['params'] as $key => $value)
                {
                    if (count(explode('-', $key)) == 3)
                    {
                        list(
                                $source_ressource_id,
                                $source_entity_id,
                                $destination_ressource_id) = explode('-', $key);
                        if (self::hasNewEavGroups() &&
                                !isset($eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id]))
                        {
                            self::getFirstClosestEavGroup($source_ressource_id, $source_entity_id, $destination_ressource_id, $eavForms);
                        }
                        if (isset($eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id]))
                        {
                            if (is_array($value))
                            {
                                foreach ($value as $item)
                                {
                                    if (empty($eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id]))
                                    {
                                        if (self::hasNewEavGroups())
                                        {
                                            self::getFirstClosestEavGroup($source_ressource_id, $source_entity_id, $destination_ressource_id, $eavForms);
                                        }
                                    }
                                    $structure = self::retriveElementStructure($eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id]);
                                    unset($structure['separator']);
                                    $eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id . "-" . $item] = $structure;
                                }
                            }
                            else
                            {
                                $structure = self::retriveElementStructure($eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id]);
                                unset($structure['separator']);
                                $eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id . "-" . $value] = $structure;
                            }
                        }
                    }
                }
                self::cleanTable($eavForms);
                self::saveEavValuesBySource($eavForms);
            }
            catch (exception $e)
            {
                throw $e;
            }
        }
    }

    public static function getFirstClosestEavGroup($source_ressource_id, $source_entity_id, $destination_ressource_id, &$eavForms)
    {
        $context = sfContext::hasInstance() ? sfContext::getInstance() : NULL;
        if ($context)
        {
            $keys = array_keys($_POST);
            foreach ($keys as $key)
            {
                if (isset($_POST[$key]) &&
                        isset($_POST[$key][$source_ressource_id . "-" . $source_entity_id]) &&
                        isset($_POST[$key][$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id]))
                {
                    $eavForms[$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id] = $_POST[$key][$source_ressource_id . "-" . $source_entity_id][$destination_ressource_id];
                    unset($_POST[$key]);
                    return;
                }
            }
        }
    }

    public static function hasNewEavGroups()
    {
        $context = sfContext::hasInstance() ? sfContext::getInstance() : NULL;
        if ($context)
        {
            $keys = array_keys($_POST);
            foreach ($keys as $key)
            {
                if (preg_match("~EAV_~", $key))
                {
                    return TRUE;
                }
            }
        }
        return FALSE;
    }

    /**
     * Enlève les index invalides et les séparateurs
     *
     * @param array &$table array reference
     *
     * @return void
     */
    public static function cleanTable(&$table)
    {
        if (!$table)
        {
            $table = array();
        }
        foreach ($table as $key => $item)
        {
            foreach ($item as $index => $value)
            {
                if (!preg_match("~\-~", $index))
                {
                    unset($table[$key][$index]);
                }
                if (array_key_exists('separator', $value))
                {
                    unset($table[$key][$index]['separator']);
                }
            }
        }
    }

    /**
     * retourne la structure approrié du tableau s'il est constitué
     * de trois niveaux
     *
     * @param <type> $table tableau
     * 
     * @return array
     */
    public static function retriveElementStructure(&$table)
    {
        $structure = array();
        foreach ($table as $key => $item)
        {
            $itemKey = key($item);
            $itemValue = $item[$itemKey];
            if ($itemKey == "separator")
            {
                unset($table[$key]);
                return $structure;
            }
            else
            {
                if (is_array($itemValue))
                {
                    if (!isset($structure[$itemKey]))
                    {
                        $structure[$itemKey] = $itemValue;
                        unset($table[$key]);
                    }
                    else
                    {
                        $structure[$itemKey] = array_merge($structure[$itemKey], $itemValue);
                        unset($table[$key]);
                    }
                }
                else
                {
                    $structure[$itemKey] = $itemValue;
                    unset($table[$key]);
                }
            }
        }
        return $structure;
    }

    /**
     * enregistre les groupes d'information complémentaires selon la source
     *
     * @param <type> $eavForm object evènement
     *
     * @return void
     */
    public static function saveEavValuesBySource($eavForm)
    {
        foreach ($eavForm as $source => $form)
        {
            foreach ($form as $destination => $fields)
            {
                self::saveEavValuesByDestination($source, $destination, $fields);
            }
        }
    }

    /**
     * enregistre les groupes d'information complémentaires selon la destination
     *
     * @param <type> $source      source
     * @param <type> $destination destination
     * @param <type> $fields      tableau des champs
     *
     * @return void
     */
    public static function saveEavValuesByDestination($source, $destination, $fields)
    {
        list($source_ressource_id, $source_entity_id) = explode('-', $source);
        list($destination_ressource_id, $destination_entity_id) = explode('-', $destination);
        $countDeleted = EavValuesTable::deleteByRessourceIdAndEntityId($destination_ressource_id, $destination_entity_id);
        foreach ($fields as $eavId => $eavValue)
        {
            self::saveField($destination_ressource_id, $destination_entity_id, $eavId, $eavValue);
        }
    }

    /**
     * Enregistre le champs
     *
     * @param <type> $destination_ressource_id identifiant de la ressource
     * @param <type> $destination_entity_id    identifiant de l'entité
     * @param <type> $eavId                    identifiant de l'attribut
     * @param <type> $eavInputValue            valeur de l'input/group d'input
     *
     * @return void
     */
    public static function saveField($destination_ressource_id, $destination_entity_id, $eavId, $eavInputValue)
    {
        $eavFullValues = Doctrine_Query::create()
                ->from('EavFullValues efv')
                ->innerJoin(sprintf("efv.Eav e on efv.eav_id = e.id and e.id = '%s'", $eavId))
                ->execute();
        $sfEavTypeName = sfEavType::retriveById($eavFullValues->getFirst()->getEav()->getEavTypeId())->getName();
        if ($sfEavTypeName == "input_text" || $sfEavTypeName == "textarea")
        {
            $eavValue = new EavValues();
            $eavValue->setRessourceId($destination_ressource_id);
            $eavValue->setEntityId($destination_entity_id);
            $eavValue->setEavFullValueId($eavFullValues->getFirst()->getId());
            $eavValue->setValue($eavInputValue);
            $eavValue->save();
        }
        else
        {
            foreach ($eavFullValues as $eavFullValue)
            {
                if (in_array($eavFullValue->getId(), (array) $eavInputValue))
                {
                    $eavValue = new EavValues();
                    $eavValue->setRessourceId($destination_ressource_id);
                    $eavValue->setEntityId($destination_entity_id);
                    $eavValue->setEavFullValueId($eavFullValue->getId());
                    $eavValue->save();
                }
            }
        }
    }

}